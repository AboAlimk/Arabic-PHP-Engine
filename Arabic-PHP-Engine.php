<?php
/**
 *		
 *		مكتبة البي اتش بي العربي 1.19.3
 *		التاريخ: 09-03-2019
 * 		الناشر : عبدالستار الخلف
 *		AboAlimk@gmail.com
 *		https://github.com/AboAlimk/Arabic-PHP-Engine
 *		
 */

class ع{
	
	public $الرمز = "ع_ع";
	
	public function تضمين( $الرابط ) {
		
		if ( هل_الملف_موجود( $الرابط ) ) {
			
			$المحتوى = جلب_محتويات_ملف( $الرابط );
			
			$النصوص = array();
			
			$آخر_موضع = 0;
			
			$عدد_خانات_الرمز = عدد_الخانات( $this->الرمز );

			while ( موضع_النص( $المحتوى , $this->الرمز ) !== خاطئ ) {
				
				$موضع_البداية = موضع_النص( $المحتوى , $this->الرمز );
				
				$موضع_النهاية = موضع_النص( $المحتوى , $this->الرمز , موضع_النص( $المحتوى , $this->الرمز ) + $عدد_خانات_الرمز );
				
				$الحجم = $موضع_النهاية - $موضع_البداية + $عدد_خانات_الرمز;
				
				
				$النص_قبل = اقتطاع( $المحتوى , 0 , $موضع_البداية );
				
				$النص_بعد = اقتطاع( $المحتوى , $موضع_النهاية + $عدد_خانات_الرمز );
				
				$النص = اقتطاع( $المحتوى , $موضع_البداية , $الحجم );
				
				$النص = استبدال_الكل( $النص , $this->الرمز , "" );
				
				$النص = '<?php' . $this->استبدال_النص( $النص ) . '?>';

				$المحتوى = $النص_قبل . $النص . $النص_بعد;
				
			}

			eval( '?>' . $المحتوى);

		}
	}
	
	private function استبدال_النص( $النص ) {
		
		$التبديل = array();
		
		$النصوص=array();
		
		preg_match_all( '/\'([^\']+)\'|"([^"]+)"/' , $النص , $النصوص );
		
		$النصوص = $النصوص[0];
		
		foreach ( $النصوص as  $_النص ) {
			
			$النص_المؤقت = توليد_نص(50);
			
			$النص = استبدال( $النص , $_النص , $النص_المؤقت );
			
			$التبديل[]=array($النص_المؤقت,$_النص);
			
		}
		$الأسماء_العربية = [
			  "؛"
			, "،"
			, "ع.إذا_كان"
			, "ع.أو_إذا"
			, "ع.آخر"
			, "ع.عملية"
			, "ع.سويتش"
			, "ع.الحالة"
			, "ع.إفتراضي"
			, "ع.بينما"
			, "ع.عمل"
			, "ع.من_أجل"
			, "ع.من_أجل_الكل"
			, "ع.مصفوفة"
			, "ع.كـ"
			, "ع.عامؤ"
		];

		$الأسماء_الأساسية = [
			  ";"
			, ","
			, "if"
			, "else if"
			, "else"
			, "function"
			, "switch"
			, "case"
			, "default"
			, "while"
			, "do"
			, "for"
			, "foreach"
			, "array"
			, "as"
			, "global"
		];

		$النص = استبدال_الكل( $النص , $الأسماء_العربية , $الأسماء_الأساسية );
		
		foreach ( $التبديل as  $_النص ) {
			
			$النص = استبدال( $النص , $_النص[0] , $_النص[1] );
			
		}
		
		return $النص;
		return eval( $النص );
	}




	
}

// اللغة الحالية للمتصفح من حرفين ar , en ...
تعريف_متغير( "لغة_المتصفح" , isset( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ) ? اقتطاع( $_SERVER['HTTP_ACCEPT_LANGUAGE'] , 0 , 2 ) : "en" );

تعريف_متغير( "اسم_الملف_الحالي" , $_SERVER['PHP_SELF'] );

تعريف_متغير( "ايبي_المضيف" , $_SERVER['SERVER_ADDR'] );

// نوع طلب الصفحة post , get
تعريف_متغير( "نوع_الطلب" , $_SERVER['REQUEST_METHOD'] );

// متغيرات الرابط
// ?id=1&name=test...
تعريف_متغير( "متغيرات_الرابط" , $_SERVER['QUERY_STRING'] );

تعريف_متغير( "الدومين" , $_SERVER['HTTP_HOST'] );

تعريف_متغير( "ايبي_المستخدم" , $_SERVER['REMOTE_ADDR'] );

تعريف_متغير( "رابط_الملف_الكامل" , $_SERVER['SCRIPT_FILENAME'] );

// فروع_الرابط
// /blog/year/month/day/...
تعريف_متغير( "فروع_الرابط" , $_SERVER['REQUEST_URI'] );

// تستخدم في أي مكان بدل true
تعريف_متغير( "صحيح" , true );

// تستخدم في أي مكان بدل false
تعريف_متغير( "خاطئ" , false );

تعريف_متغير( "أحرف_كبيرة" , CASE_UPPER );

تعريف_متغير( "أحرف_صغيرة" , CASE_LOWER );

// هل يتم التصفح من الأمان https
تعريف_متغير( "الأمان_مفعل" , isset( $_SERVER['HTTPS'] ) && $_SERVER['HTTPS'] === 'on' ? صحيح : خاطئ );

// http://www.example.com/
تعريف_متغير( "الرابط_الأساسي" , ( الأمان_مفعل ? "https" : "http" ) . "://" . الدومين . "/" );

// http://www.example.com/blog/year/month/day/name
تعريف_متغير( "الرابط_الكامل" , الرابط_الأساسي . ( اقتطاع( فروع_الرابط , 0 , 1 ) == "/" ? اقتطاع( فروع_الرابط , 1 ) : فروع_الرابط ) );

// php user agent
تعريف_متغير( "معرف_المتصفح" , $_SERVER['HTTP_USER_AGENT'] );

// إذا كان التصفح يتم عن طريق الهاتف
تعريف_متغير( "هل_التصفح_من_هاتف" , موضع_النص( معرف_المتصفح , "Mobile" ) || موضع_النص( معرف_المتصفح , "Mobi" ) ? صحيح : خاطئ );

// توليد نص عشوائي
function توليد_نص( $الحجم = 10 ){
	
	$الأحرف_المتاحة = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
	
	$العدد = عدد_الخانات( $الأحرف_المتاحة );
	
	$النص = '';
	
	for( $ن = 0 ; $ن < $الحجم ; $ن++ ){
		
		$النص .= $الأحرف_المتاحة[ توليد_رقم_بين( 0 , $العدد - 1 ) ];
		
	}
	
	return $النص;
	
}

// توليد رقم عشوائي
function توليد_رقم( $الحجم = 10 ){
	
	$الأرقام_المتاحة = '0123456789';
	
	$العدد = عدد_الخانات( $الأرقام_المتاحة );
	
	$الرقم = '';
	
	for( $ن = 0 ; $ن < $الحجم ; $ن++ ){
		
		$الرقم .= $الأرقام_المتاحة[ توليد_رقم_بين( 0 , $العدد - 1) ];
		
	}
	
	return $الرقم;
	
}

/*************************************		المصفوفات		*************************************/

// php array_change_key_case
// تغيير حالة أحرف مفاتيح المصفوفة
// أحرف_كبيرة , أحرف_صغيرة
function تغيير_حالة_أحرف_المصفوفة( $المصفوفة , $الحالة ){
	
	return array_change_key_case( $المصفوفة , $الحالة );
	
}

// php array_chunk
// تقسيم المصفوفة إلى مصفوفات ضمن المصفوفة الأساسية
function تقسيم_المصفوفة( $المصفوفة , $العدد ){
	
	return array_chunk( $المصفوفة , $العدد );
	
}

// php array_combine
// دمج مصفوفتين الأولى تكون مفاتيح والثانية قيم
function دمج_مصفوفتين( $المصفوفة_1 , $المصفوفة_2 ){
	
	return array_combine( $المصفوفة_1 , $المصفوفة_2 );
	
}

// php array_diff
// ايجاد الفرق بين المصفوفات
// فرق_القيم_بين_المصفوفات( $المصفوفة1 [, $المصفوفة2] [, $المصفوفة3] ... )
function فرق_القيم_بين_المصفوفات(){
	
	return call_user_func_array( "array_diff" , func_get_args() );
	
}

// php array_flip
// التبديل بين القيم و المفاتيح للمصفوفة
function قلب_القيم_والمفاتيح_للمصفوفة( $المصفوفة ){
	
	return array_flip( $المصفوفة );
	
}

// php array_intersect
// ايجاد القيم المشتركة بين المصفوفات
// ايجاد_القيم_المشتركة_بين_المصفوفات( $المصفوفة1 [, $المصفوفة2] [, $المصفوفة3] ... )
function ايجاد_القيم_المشتركة_بين_المصفوفات(){
	
	return call_user_func_array( "array_intersect" , func_get_args() );
	
}

// php array_key_exists
// إذا كانت المصفوفة تحوي مفتاح
function هل_تحوي_المصفوفة_مفتاح( $المفتاح , $المصفوفة ){
	
	return array_key_exists( $المفتاح , $المصفوفة );
	
}

// php array_keys
// جلب مفاتيح المصفوفة ضمن مصفوفة جديدة
function جلب_مفاتيح_المصفوفة( $المصفوفة ){
	
	return array_keys( $المصفوفة );
	
}

// php array_map
// تطبيق عملية محددة على كافة قيم المصفوفة
// تطبيق_عملية_على_قيم_المصفوفة( $المصفوفة1 [, $المصفوفة2] [, $المصفوفة3] ... )
function تطبيق_عملية_على_قيم_المصفوفة(){
	
	return call_user_func_array( "array_map" , func_get_args() );
	
}

// php array_merge
// دمج عدة مصفوفات
// دمج_مصفوفات( $المصفوفة1 [, $المصفوفة2] [, $المصفوفة3] ... )
function دمج_مصفوفات(){
	
	return call_user_func_array( "array_merge" , func_get_args() );
	
}

// php array_pop
// حذف آخر عنصر من المصفوفة
function حذف_آخر_عنصر_من_المصفوفة( $المصفوفة ){
	
	return array_pop( $المصفوفة );
	
}

// php array_push
// إضافة قيم إلى نهاية المصفوفة
// إضافة_عناصر_إلى_المصفوفة( $المصفوفة , $القيمة1 [, $القيمة2] [, $القيمة3 ])
function إضافة_عناصر_إلى_المصفوفة(){
	
	return call_user_func_array( "array_push" , func_get_args() );
	
}

// php array_rand
// جلب عناصر عشوائية من المصفوفة
// جلب_عناصر_عشوائية_من_المصفوفة( $المصفوفة , $العدد )
function جلب_عناصر_عشوائية_من_المصفوفة(){
	
	return call_user_func_array( "array_rand" , func_get_args() );
	
}

// php array_reverse
// عكس المصفوفة
function عكس_المصفوفة( $المصفوفة ){
	
	return array_reverse( $المصفوفة );
	
}

// php array_search
// بحث عن قيمة ضمن المصفوفة و إرجاع المفتاح
function بحث_في_المصفوفة( $البحث , $المصفوفة ){
	
	return array_search( $البحث , $المصفوفة );
	
}

// php array_shift
// حذف أول عنصر من المصفوفة
function حذف_أول_عنصر_من_المصفوفة( $المصفوفة ){
	
	return array_shift( $المصفوفة );
	
}

// php array_slice
// جلب قسم من المصفوفة ضمن مصفوفة جديدة
// جلب_قسم_من_المصفوفة( $المصفوفة , $البداية [, $الحجم] )
function جلب_قسم_من_المصفوفة(){
	
	return call_user_func_array( "array_slice" , func_get_args() );
	
}

// php array_sum
// جلب مجموع قيم المصفوفة الرقمية
function جلب_مجموع_قيم_المصفوفة( $المصفوفة ){
	
	return array_sum( $المصفوفة );
	
}

// php array_unique
// حذف القيم المكررة من المصفوفة
function حذف_المكرر_من_المصفوفة( $المصفوفة ){
	
	return array_unique( $المصفوفة );
	
}

// php array_unshift
// إضافة قيم إلى بداية المصفوفة
// إضافة_عناصر_إلى_بداية_المصفوفة( $المصفوفة , $القيمة1 [, $القيمة2] [, $القيمة3 ])
function إضافة_عناصر_إلى_بداية_المصفوفة(){
	
	return call_user_func_array( "array_unshift" , func_get_args() );
	
}

// php array_values
// جلب قيم المصفوفة فقط ضمن مصفوفة جديدة
function جلب_قيم_المصفوفة( $المصفوفة ){
	
	return array_values( $المصفوفة );
	
}

// php asort
// ترتيب المصفوفة تصاعدياً حسب القيم
function ترتيب_قيم_المصفوفة_تصاعدي( $المصفوفة ){
	
	return asort( $المصفوفة );
	
}

// php arsort
// ترتيب المصفوفة تنازلياً حسب القيم
function ترتيب_قيم_المصفوفة_تنازلي( $المصفوفة ){
	
	return arsort( $المصفوفة );
	
}

// php count
// جلب عدد عناصر المصفوفة
function حجم_المصفوفة( $المصفوفة ){
	
	return count( $المصفوفة );
	
}

// php current
// جلب العنصر الحالي من المصفوفة
function جلب_العنصر_الحالي_للمصفوفة( $المصفوفة ){
	
	return current( $المصفوفة );
	
}

// php reset
// جلب العنصر الأول من المصفوفة
function جلب_العنصر_الأول_للمصفوفة( $المصفوفة ){
	
	return reset( $المصفوفة );
	
}

// php end
// جلب العنصر الأخير من المصفوفة
function جلب_العنصر_الأخير_للمصفوفة( $المصفوفة ){
	
	return end( $المصفوفة );
	
}

// php next
// جلب العنصر التالي من المصفوفة
function جلب_العنصر_التالي_للمصفوفة( $المصفوفة ){
	
	return next( $المصفوفة );
	
}

// php prev
// جلب العنصر السابق من المصفوفة
function جلب_العنصر_السابق_للمصفوفة( $المصفوفة ){
	
	return prev( $المصفوفة );
	
}

// php ksort
// ترتيب المصفوفة تصاعدياً حسب المفاتيح
function ترتيب_مفاتيح_المصفوفة_تصاعدي( $المصفوفة ){
	
	return ksort( $المصفوفة );
	
}

// php krsort
// ترتيب المصفوفة تنازلياً حسب المفاتيح
function ترتيب_مفاتيح_المصفوفة_تنازلي( $المصفوفة ){
	
	return krsort( $المصفوفة );
	
}

// php range
// توليد مصفوفة من أرقام
// توليد_مصفوفة_أرقام( $الرقم_الأصغر , $الرقم_الأكبر , $الفاصل_بين_الأرقام )
function توليد_مصفوفة_أرقام(){
	
	return call_user_func_array( "range" , func_get_args() );
	
}

// php shuffle
// ترتيب المصفوفة بشكل عشوائي
function ترتيب_المصفوفة_عشوائي( $المصفوفة ){
	
	return shuffle( $المصفوفة );
	
}

// php sort
// ترتيب المصفوفة تصاعدياً
function ترتيب_المصفوفة_تصاعدي( $المصفوفة ){
	
	return sort( $المصفوفة );
	
}

// php rsort
// ترتيب المصفوفة تنازلياً
function ترتيب_المصفوفة_تنازلي( $المصفوفة ){
	
	return rsort( $المصفوفة );
	
}

// php in_array
// إذا كانت المصفوفة تحوي قيمة
function هل_تملك_المصفوفة_عنصر( $البحث , $المصفوفة ){
	
	return in_array( $البحث , $المصفوفة );
	
}

// إذا كانت المصفوفة تحوي مفاتيح
// ["blue","red"] خاطئ
// ["a"=>"blue","b"=>"red"] صحيح
function هل_المصفوفة_تحوي_مفاتيح( array $المصفوفة ){
	
    if ( array() === $المصفوفة ){
		
		return خاطئ;
		
	}
	
    return جلب_مفاتيح_المصفوفة( $المصفوفة ) !== توليد_مصفوفة_أرقام( 0 , حجم_المصفوفة( $المصفوفة ) - 1 );

}

function كل( $المصفوفة , $العملية ){
	
	if ( هل_المصفوفة_تحوي_مفاتيح( $المصفوفة ) ) {
		
		foreach( $المصفوفة as $الاسم => $القيمة ) {
			
			$العملية( $الاسم , $القيمة );
			
		}
		
	} else {
		
		for( $الرقم = 0 ; $الرقم < count( $المصفوفة ) ; $الرقم++ ) {
			
			$العملية( $الرقم , $المصفوفة[ $الرقم ] );
			
		}
		
	}
	
}

/*************************************		المصفوفات		*************************************/





/*************************************			الوقت		*************************************/

// جلب عدد أيام الشهر من السنة
// إذا كان الشهر 28 ، 30 أو 31 يوم
function عدد_أيام_الشهر( $الشهر , $السنة ){
	
	return cal_days_in_month( CAL_GREGORIAN , $الشهر , $السنة );
	
}

//	جلب المنطقة الزمنية الحالية
function جلب_المنطقة_الزمنية(){
	
	return date_default_timezone_get();
	
}

//	تغيير المنطقة الزمنية الحالية
function تغيير_المنطقة_الزمنية( $المنطقة_الزمنية ){
	
	return date_default_timezone_set( $المنطقة_الزمنية );
	
}

function جلب_اسم_اليوم( $الاسم ) {
	
	$الاسم = تبديل_لصغير( $الاسم );
	
	return [ 
		"sun" => "الأحد"
		, "mon" => "الإثنين"
		, "tue" => "الثلاثاء"
		, "wed" => "الأربعاء"
		, "thu" => "الخميس"
		, "fri" => "الجمعة"
		, "sat" => "السبت"
	][ $الاسم ];
	
}

function جلب_اسم_الشهر( $الرقم ) {
	
	return [
		"كانون الثاني"
		, "شباط"
		, "آذار"
		, "نيسان"
		, "أيار"
		, "حزيران"
		, "تموز"
		, "آب"
		, "أيلول"
		, "تشرين الأول"
		, "تشرين الثاني"
		, "كانون الأول"
	][ $الرقم ];
	
}

// العملية تغنيك عن استخدام time , date
// الوقت() إرجاع تايم ستامب
// الوقت( $المطلوب ) إرجاع قيمة المطلوب يوم، شهر، سنة ...
// الوقت( "صيغة" ) إرجاع نص بالقيم المطلوبة
// مثال الوقت( "س-ر-م ع:د:ث و" )
// س	سنة
// ش	اسم الشهر
// ر	رقم الشهر
// ي	اسم اليوم
// م	رقم اليوم
// ع	الساعة 12
// ة	الساعة 24
// د	دقيقة
// ث	ثانية
// و	الوضع مساءً أو صباحاً
function الوقت( $الوقت = null ){
	
	if ( $الوقت ) {
		
		$الوقت_الأساسي = time();
		
		$مصفوفة_الوقت = array(
						  "الثانية" => date(  "s" , $الوقت_الأساسي )
						, "الدقيقة" => date(  "i" , $الوقت_الأساسي )
						, "الساعة" => date(  "h" , $الوقت_الأساسي )
						, "رقم_اليوم" => date(  "d" , $الوقت_الأساسي )
						, "اسم_اليوم" => جلب_اسم_اليوم( date(  "D" , $الوقت_الأساسي ) )//
						, "رقم_الشهر" => date(  "m" , $الوقت_الأساسي )
						, "اسم_الشهر" => جلب_اسم_الشهر( جلب_الرقم( date(  "m" , $الوقت_الأساسي ) ) )//
						, "السنة" => date(  "Y" , $الوقت_الأساسي )
						, "الوضع" => تبديل_لصغير( date(  "a" , $الوقت_الأساسي ) ) == "am" ? "صباحاً" : "مساءً"
					);
					
		if ( هل_تحوي_المصفوفة_مفتاح( $الوقت , $مصفوفة_الوقت ) ) {
			
			return $مصفوفة_الوقت[ $الوقت ];
			
		} else {

			$الوقت_المخرج = $الوقت;
			
			$الوقت_المخرج = استبدال_الكل(
				$الوقت_المخرج ,
				[ "س" , "ش" , "ر" , "ي" , "م" , "ع" , "ة" , "د" , "ث" , "و" ] ,
				[ "___a" , "___b" , "___c" , "___d" , "___e" , "___f" , "___g" , "___h" , "___i" , "___j" ]
				);
				
			$الوقت_المخرج = استبدال_الكل(
				$الوقت_المخرج ,
				[ "___a" , "___b" , "___c" , "___d" , "___e" , "___f" , "___g" , "___h" , "___i" , "___j" ] ,
				[ $مصفوفة_الوقت[ "السنة" ] , $مصفوفة_الوقت[ "اسم_الشهر" ] , $مصفوفة_الوقت[ "رقم_الشهر" ] , $مصفوفة_الوقت[ "اسم_اليوم" ] , $مصفوفة_الوقت[ "رقم_اليوم" ] , date(  "H" , $الوقت_الأساسي ) , $مصفوفة_الوقت[ "الساعة" ] , $مصفوفة_الوقت[ "الدقيقة" ] , $مصفوفة_الوقت[ "الثانية" ] , $مصفوفة_الوقت[ "الوضع" ] ] );
			
			return $الوقت_المخرج;
			
		}
		
	} else {
		
		return time();
		
	}
	
}

// php strtotime
// تحويل النص إلى وقت تايم ستامب
function النص_إلى_وقت( $النص ){
	
	return strtotime( $النص );
	
}

/*************************************			الوقت		*************************************/





/*************************************			النصوص		*************************************/

// php mb_substr
// اقتطاع جزء محدد من النص
// اقتطاع( $النص , $البداية , $الحجم  )
function اقتطاع() {
	
	return call_user_func_array( "mb_substr" , func_get_args() );
	
}

// php str_replace
// البحث عن كل النصوص المطابقة واستبدالها
function استبدال_الكل( $النص , $البحث , $الاستبدال ) {
	
	return str_replace( $البحث , $الاستبدال , $النص );
	
}

// php preg_replace
// البحث عن نص واستبداله بآخر مرة واحدة
function استبدال( $النص , $البحث , $الاستبدال ) {
	
	return preg_replace( "/".$البحث."/" , $الاستبدال , $النص , 1 );
	
}

// php addslashes
// إضافة سلاش إلى علامات التنصيص
function إضافة_سلاش( $النص ) {
	
	return addslashes( $النص );
	
}

// php stripslashes
// حذف جميع السلاش من النص
function حذف_سلاش( $النص ) {
	
	return stripslashes( $النص );
	
}

// php explode
// تقسيم النص إلى مصفوفة بناءً على بحث
// تقطيع_النص( $الفاصل , $النص  )
function تقطيع_النص( $الفاصل , $النص ) {
	
	return explode( $الفاصل , $النص );
	
}

// php implode
// جمع قيم المصفوفة وتحويلها إلى نص
// جمع_النصوص_من_مصفوفة( $الفاصل , $المصفوفة  )
function جمع_النصوص_من_مصفوفة() {
	
	return call_user_func_array( "implode" , func_get_args() );
	
}

// php ltrim
// حذف المسافات من يسار النص
function حذف_المسافات_من_يسار_النص( $النص ) {
	
	return ltrim( $النص );
	
}

// php rtrim
// حذف المسافات من يمين النص
function حذف_المسافات_من_يمين_النص( $النص ) {
	
	return rtrim( $النص );
	
}

// php md5
// تشفير النص وتحويله إلى md5
function تشفير_ام_دي_5( $النص ) {
	
	return md5( $النص );
	
}

// php sha1
// تشفير النص وتحويله إلى sha1
function تشفير_شا_1( $النص ) {
	
	return sha1( $النص );
	
}

// php sprintf
// استبدال المتغيرات ضمن النص %s
// استبدال_متغيرات_النصوص( $النص , $المتغير1 [, $المتغير2] )
function استبدال_متغيرات_النصوص() {
	
	return call_user_func_array( "sprintf" , func_get_args() );
	
}

// php mb_strlen
// جلب عدد أحرف النص
function عدد_الخانات( $النص ){
	
	return mb_strlen( $النص );
	
}

// php str_word_count
// جلب عدد الكلمات ضمن النص
function عدد_الكلمات( $النص ){
	
	return str_word_count( $النص );
	
}

// php strrev
// قلت أحرف النص بين بعضها
function عكس_النص( $النص ){
	
	return strrev( $النص );
	
}

// php mb_strpos
// ايجاد موضع نص ضمن النص الأساسي
// موضع_النص( $النص , $البحث [, $البداية] )
function موضع_النص(){
	
	return call_user_func_array( "mb_strpos" , func_get_args() );
	
}

// php strtoupper
// تحويل النص إلى أحرف كبيرة
function تبديل_لكبير( $النص ){
	
	return strtoupper( $النص );
	
}

// php strtolower
// تحويل النص إلى أحرف صغيرة
function تبديل_لصغير( $النص ){
	
	return strtolower( $النص );
	
}

// php substr_count
// إيجاد عدد المطابقات ضمن النص
// عدد_المطابقات( $النص , المطابقة [, $البداية ][, $مجال_البحث] )
function عدد_المطابقات(){
	
	return call_user_func_array( "substr_count" , func_get_args() );
	
}

// php wordwrap
// إضافة نص إلى النص كل عدد أحرف معين
function إضافة_نص_كل( $النص , $الحجم = 75 , $بداية_السطر = "\n" ){
	
	return htmlspecialchars( $النص , $الحجم , $بداية_السطر );
	
}

// php htmlspecialchars
// طباعة النص مع تجاهل HTML
function الكود_إلى_نص( $النص ){
	
	return htmlspecialchars( $النص );
	
}

/*************************************			النصوص		*************************************/





/*************************************			الأرقام		*************************************/

// php abs
// جلب الرقم الايجابي من الرقم المعطى
function جلب_الرقم_الإيجابي( $الرقم ){
	
	return abs( $الرقم );
	
}

// php ceil
// تقريب الرقم للعدد الأعلى
function تقريب_لأعلى( $الرقم ){
	
	return ceil( $الرقم );
	
}

// php floor
// تقريب الرقم للعدد الأدنى
function تقريب_لأسفل( $الرقم ){
	
	return floor( $الرقم );
	
}

// php round
// تقريب إلى عدد محدد من الفواصل
function تقريب_إلى_فواصل( $الرقم , $الفواصل = 0 ){
	
	return round( $الرقم , $الفواصل );
	
}

// php is_finite
// إذا كان الرقم محدود
function هل_الرقم_محدود( $الرقم ){
	
	return is_finite( $الرقم );
	
}

// php is_infinite
// إذا كان الرقم غير محدود
function هل_الرقم_غير_محدود( $الرقم ){
	
	return is_infinite( $الرقم );
	
}

// php is_nan
// إذا كان المتغير غير رقمي
function هل_المتغير_غير_رقمي( $المتغير ){
	
	return is_nan( $المتغير );
	
}
// php max
// جلب الرقم الأقل من ضمن مجموعة أرقام
// جلب_الأعلى( الرقم1 , الرقم2 [, الرقم3 ...] )
// جلب_الأعلى( [ الرقم1 , الرقم2 [, الرقم3 ...] ] )
function جلب_الأعلى(){
	
	return call_user_func_array( "max" , func_get_args() );
	
}

// php min
// جلب الرقم الأقل من ضمن مجموعة أرقام
// جلب_الأقل( الرقم1 , الرقم2 [, الرقم3 ...] )
// جلب_الأقل( [ الرقم1 , الرقم2 [, الرقم3 ...] ] )
function جلب_الأقل(){
	
	return call_user_func_array( "min" , func_get_args() );
	
}

// php mt_rand
// توليد رقم بين رقمين
// توليد_رقم_بين( الرقم_الأقل , الرقم_الأعلى )
function توليد_رقم_بين(){
	
	return call_user_func_array( "mt_rand" , func_get_args() );
	
}

/*************************************			الأرقام		*************************************/





/*************************************	الجلسات و الكوكيز	*************************************/

// php $_COOKIE
// إذا كان الكوكيز المطلوب قد تم إدخاله
function هل_الكوكيز_مضاف( $الاسم ){
	
	return isset( $_COOKIE[ $الاسم ] );
	
}

// جلب قيمة الكوكيز
function جلب_الكوكيز( $الاسم ){
	
	return $_COOKIE[ $الاسم ];
	
}

// تعديل قيمة الكوكيز
function تعديل_الكوكيز( $الاسم , $القيمة , $المدة = 86400 * 30 ){
	
	setcookie( $الاسم , $القيمة , time() + $المدة , "/");
	
}

// حذف الكوكيز
// واحدة أو الكل
function حذف_الكوكيز( $الاسم = null ){
	
	if ( $الاسم ) {
		
		تعديل_الكوكيز( $الاسم , "" , - 3600 );
		
		unset( $_COOKIE[ $الاسم ] );
		
	} else {
		
		foreach ( $_COOKIE as $الاسم => $القيمة ) {
			
			تعديل_الكوكيز( $الاسم , "" , - 3600 );
			
			unset( $_COOKIE[ $الاسم ] );
			
		}
		
	}
	
}

// php $_SESSION
// قبل استخدام الجلسات يجب تشغيل العملية هذه
function تفعيل_الجلسات(){
	
	session_start();
	
}

// إذا كانت الجلسة تم إضافتها
function هل_الجلسة_مضافة( $الاسم ){
	
	return isset( $_SESSION[ $الاسم ] );
	
}

// جلب قيمة الجلسة
function جلب_الجلسة( $الاسم ){
	
	return $_SESSION[ $الاسم ];
	
}

// تعديل قيمة الجلسة
function تعديل_الجلسة( $الاسم , $القيمة ){
	
	$_SESSION[ $الاسم ] = $القيمة;
	
}

// حذف الجلسات
// واحدة أو الكل
function حذف_الجلسات( $الاسم = null ){
	
	if ( $الاسم ) {
		
		unset( $_SESSION[ $الاسم ] );
		
	} else {
		
		session_unset();
		
		session_destroy(); 
		
	}
	
}

/*************************************	الجلسات و الكوكيز	*************************************/





/*************************************		بوست جيت فايل	*************************************/

// php $_POST
// إذا كان هناك بيانات بوست تم استلامها
// واحدة أو الكل
function هل_متغير_بوست_معرف( $الاسم = "" ){
	
	if ( $الاسم ) {
		
		return isset( $_POST[ $الاسم ] );
		
	}
	
	return isset( $_POST );
	
}

// جلب قيمة متغير بوست
function جلب_بوست( $الاسم = "" ){
	
	if ( $الاسم ) {
		
		return $_POST[ $الاسم ];
		
	}
	
	return $_POST;
	
}

// php $_GET
// إذا كان هناك بيانات جيت تم استلامها
// واحدة أو الكل
function هل_متغير_جيت_معرف( $الاسم = "" ){
	
	if ( $الاسم ) {
		
		return isset( $_GET[ $الاسم ] );
		
	}
	
	return isset( $_GET );
	
}

// جلب قيمة متغير جيت
function جلب_جيت( $الاسم = "" ){
	
	if ( $الاسم ) {
		
		return $_GET[ $الاسم ];
		
	}
	
	return $_GET;
	
}

// php $_FILES
// إذا كان هناك ملفات تم استلامها
// واحدة أو الكل
function هل_متغير_المرفق_معرف( $الاسم = "" ){
	
	if ( $الاسم ) {
		
		return isset( $_FILES[ $الاسم ] );
		
	}
	
	return isset( $_FILES );
	
}

// جلب بيانات المرفقات
// واحد أو الكل
function جلب_المرفق( $الاسم = "" ){
	
	if ( $الاسم ) {
		
		return $_FILES[ $الاسم ];
		
	}
	
	return $_FILES;
	
}

// جلب الاسم الحقيقي للمرفق
function جلب_اسم_المرفق( $الاسم ){
	
	return $_FILES[ $الاسم ][ "name" ];
	
}

// جلب الاسم المؤقت للمرفق
function جلب_الاسم_المؤقت_للمرفق( $الاسم ){
	
	return $_FILES[ $الاسم ][ "tmp_name" ];
	
}

// جلب حجم المرفق
function جلب_حجم_المرفق( $الاسم ){
	
	return $_FILES[ $الاسم ][ "size" ];
	
}

// جلب نوع المرفق
function جلب_نوع_المرفق( $الاسم ){
	
	return $_FILES[ $الاسم ][ "type" ];
	
}

/*************************************		بوست جيت فايل	*************************************/





/*************************************		الملفات			*************************************/

// php file_get_contents
// جلب محتويات ملف من السيرفر أو موقع آخر
function جلب_محتويات_ملف( $الرابط ){
	
	return file_get_contents( $الرابط );
	
}

// php unlink
// حذف ملف من السيرفر
function حذف_ملف( $الاسم ){
	
	return unlink( $الاسم );
	
}

// php rename
// إعادة تسمية ملف على السيرفر
function إعادة_تسمية_ملف( $الملف , $الاسم_الجديد ){
	
	return pathinfo( $الملف , $الاسم_الجديد );
	
}

// php pathinfo
// معلومات الرابط
function معلومات_الرابط( $الرابط ){
	
	return pathinfo( $الرابط );
	
}

// php mkdir
// إنشاء مجلد على السيرفر
function إنشاء_مجلد( $الاسم ){
	
	return mkdir( $الاسم );
	
}

// php is_dir
// هل الرابط مجلد
function هل_الرابط_مجلد( $الرابط ){
	
	return is_dir( $الرابط );
	
}

// php copy
// نسخ ملف
// نسخ_ملف( $الملف_الأساس , $الملف_الوجهة )
function نسخ_ملف(){
	
	return call_user_func_array( "copy" , func_get_args() );
	
}

// php dirname
// جلب رايط المجلد
function جلب_رابط_المجلد( $الرابط ){
	
	return dirname( $الرابط );
	
}

// php basename
// جلب اسم الملف
// جلب_اسم_الملف( $الرابط [, $اللاحقة] )
function جلب_اسم_الملف(){
	
	return call_user_func_array( "basename" , func_get_args() );
	
}

// php file_exists
// إذا كان الملف موجود
function هل_الملف_موجود( $الرابط ){
	
	return file_exists( $الرابط );
	
}

// قراءة ملف من السيرفر
function قراءة_ملف( $الرابط ){
	
	$المخرجات = "";
	
	$الملف = fopen( $الرابط , "r" );
	
	$المخرجات = fread( $الملف , filesize( $الرابط ) );
	
	fclose( $الملف );
	
	return $المخرجات;
	
}

// كتابة ملف إلى السيرفر
function كتابة_ملف( $الرابط , $البيانات ){
	
	$الملف = fopen( $الرابط , "w" );
	
	fwrite($الملف, $البيانات);
	
	fclose($الملف);
	
}

// php move_uploaded_file
// رفع ملف إلى السيرفر
function رفع_ملف( $الاسم , $الوجهة ){
	
	return move_uploaded_file( جلب_الاسم_المؤقت_للمرفق( $الاسم ) , $الوجهة );
	
}

/*************************************		الملفات			*************************************/





/*************************************	قاعدة البيانات		*************************************/

// إنشاء اتصال mysql جديد
function إنشاء_اتصال( $المضيف , $اسم_المستخدم , $كلمة_المرور , $قاعدة_البيانات ) {
	
	return new mysqli( $المضيف , $اسم_المستخدم , $كلمة_المرور , $قاعدة_البيانات );
	
}

// php mysql insert , update , delete , select
// إدخال ، تعديل ، حذف أو جلب بيانات من قاعدة البيانات
// الطلبات المسموح كتابتها باللغة العربية
// ،				,
// ع.جلب			select
// ع.من				from
// ع.عندما_يكون		where
// ع.حد				limit
// ع.العدد			count
// ع.حذف			delete
// ع.تحديث			update
// ع.الترتيب		order by
// ع.تصاعدي			asc
// ع.تنازلي			desc
// ع.أعلى			max
// ع.أقل			min
// ع.إدخال			insert into
// ع.القيم			values
// ع.إعداد			set
// ع.و				and
// ع.أو				or
function طلب_قاعدة_بيانات( $الاتصال , $الطلب , $تحديث_أو_حذف_أو_إدخال = خاطئ ){
	
	$الطلب = استبدال_الكل(
			  $الطلب
			, [ "،"	 	, "ع.جلب" 	, "ع.من" 	, "ع.عندما_يكون" 	, "ع.حد" 	, "ع.العدد" 	, "ع.حذف" 	, "ع.تحديث" , "ع.الترتيب" 	, "ع.تصاعدي" 	, "ع.تنازلي" 	, "ع.أعلى" 	, "ع.أقل" 	, "ع.إدخال" 	, "ع.القيم" , "ع.إعداد" , "ع.و" , "ع.أو" 	]
			, [ "," 	, "select" 	, "from" 	, "where" 			, "limit" 	, "count" 		, "delete" 	, "update" 	, "order by" 	, "asc" 		, "desc" 		, "max" 	, "min" 	, "insert into" , "values" 	, "set"		, "and"	, "or"		] 
			 );
			
	$نتيجة_الطلب = $الاتصال->query( $الطلب );
	
	if ( $تحديث_أو_حذف_أو_إدخال ) {
		
		return $نتيجة_الطلب;
		
	} else {
		
		$النتيجة = array( "عدد_الصفوف" => $نتيجة_الطلب->num_rows , "الصفوف" => array() );
		
		while( $الصف = $نتيجة_الطلب->fetch_array() ){
			
			$النتيجة[ "الصفوف" ] = $الصف;
			
		}
		
		return $النتيجة;
		
	}
	
}

// php mysql insert_id
// جلب معرف آخر صف تم إدخاله في قاعدة البيانات
function آخر_مدخل( $الاتصال ){
	
	return $الاتصال->insert_id;
	
}

/*************************************	قاعدة البيانات		*************************************/

// php sleep
// لإيقاف السكربت وقت محدد
function ايقاف_السكربت_مؤقت( $الوقت ) {
	
	sleep( $الوقت );
	
}

// php exit
// لإيقاف السكربت ومنع متابعة استخراجه
function ايقاف_السكربت() {
	
	exit;
	
}

// php include
// لتضمين ملف داخل السكربت
function تصمين_ملف( $الملف ) {
	
	include $الملف;
	
}

// php define
// تعريف متغير لتتمكن من استخدامه ضمن السكربت في أي مكان
function تعريف_متغير( $الاسم , $المتفير ) {
	
	define( $الاسم , $المتفير );
	
}

// إذا كان المتغير بريد إلكتروني
function هل_المتغير_بريد( $المتفير ) {
	
	return filter_var( $المتفير , FILTER_VALIDATE_EMAIL );
	
}

// php empty
// إذا كان المتغير له قيمة
function هل_المتغير_بلا_قيمة( $المتفير ) {
	
	return empty( $المتفير );
	
}

// php intval
// استخراج الرقم من النص
function جلب_الرقم( $النص ) {
	
	return intval( $النص );
	
}

// php floatval
// استخراج الرقم مع الفواصل من النص
function جلب_الرقم_مع_فواصل( $النص ) {
	
	return floatval( $النص );
	
}

// php print_r
// طباعة مصفوفة
function طباعة_مصفوفة( $المصفوفة ){
	
	echo print_r( $المصفوفة );
	
}

// php echo
// طباعة نص
function طباعة( $النص ){
	
	echo $النص;
	
}

// $_SERVER["HTTP_REFERER"]
// هل الرابط مباشر أو تم التحويل من رابط آخر
function هل_رابط_الإحالة_معرف() {
	
	return isset($_SERVER["HTTP_REFERER"]);
	
}

// جلب فروع الرابط 
// http://example.com/blog/year/month/day
// blog/year/month/day
function جلب_مصفوفة_الفروع( $مجلد_الموقع = "" ){
	
	$الفروع = فروع_الرابط;
	
	if( اقتطاع( $الفروع , 0 , 1 ) === "/" ){
		
		$الفروع = اقتطاع( $الفروع , 1 );
		
	}
	
	if ( $مجلد_الموقع && تبديل_لصغير( اقتطاع( $الفروع , 0 , عدد_الخانات( $مجلد_الموقع ) ) ) === تبديل_لصغير( $مجلد_الموقع ) ) {
		
		$الفروع = اقتطاع( $الفروع , عدد_الخانات( $مجلد_الموقع ) );
		
	}
	
	if( اقتطاع( $الفروع , 0 , 1 ) === "/" ){
		
		$الفروع = اقتطاع( $الفروع , 1 );
		
	}
	
	$الفروع = explode( "/" , $الفروع );
	
	return $الفروع;
	
}